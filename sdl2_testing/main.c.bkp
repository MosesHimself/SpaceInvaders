

#include "SDL.h"
#include "SDL_image.h"
#include <stdio.h>
#include <time.h>

typedef struct
{
  int x, y;
  short life;
  char *name;
} Man;

typedef struct
{
  int x, y;
} Star;

typedef struct
{
  //Players
  Man man;
  
  //Stars
  Star stars[100];
  
  //Images
  SDL_Texture *star;
  SDL_Texture *manFrames[2];
  SDL_Texture *brick;
  
  //Renderer
  SDL_Renderer *renderer;
} GameState;

void loadGame(GameState *game)
{
  SDL_Surface *surface = NULL;

  //Load images and create rendering textures from them
  surface = IMG_Load("star.png");
  if(surface == NULL)
  {
    printf("Cannot find star.png!\n\n");
    SDL_Quit();
    exit(1);
  }
  
  game->star = SDL_CreateTextureFromSurface(game->renderer, surface);
  SDL_FreeSurface(surface);
  
  surface = IMG_Load("man_lta.png");
  if(surface == NULL)
  {
    printf("Cannot find man_lta.png!\n\n");
    SDL_Quit();
    exit(1);
  }
  game->manFrames[0] = SDL_CreateTextureFromSurface(game->renderer, surface);
  SDL_FreeSurface(surface);

  surface = IMG_Load("man_ltb.png");
  if(surface == NULL)
  {
    printf("Cannot find man_ltb.png!\n\n");
    SDL_Quit();
    exit(1);
  }
  game->manFrames[1] = SDL_CreateTextureFromSurface(game->renderer, surface);
  SDL_FreeSurface(surface);
  
  surface = IMG_Load("brick.png");
  game->brick = SDL_CreateTextureFromSurface(game->renderer, surface);
  SDL_FreeSurface(surface);

  game->man.x = 320-40;
  game->man.y = 240-40;

  //init stars
  for(int i = 0; i < 100; i++)
  {
    game->stars[i].x = random()%640;
    game->stars[i].y = random()%480;
  }
}

int processEvents(SDL_Window *window, GameState *game)
{
  SDL_Event event;
  int done = 0;

  while(SDL_PollEvent(&event))
  {
    switch(event.type)
    {
      case SDL_WINDOWEVENT_CLOSE:
      {
        if(window)
        {
          SDL_DestroyWindow(window);
          window = NULL;
          done = 1;
        }
      }
      break;
      case SDL_KEYDOWN:
      {
        switch(event.key.keysym.sym)
        {
          case SDLK_ESCAPE:
            done = 1;
          break;
        }
      }
      break;
      case SDL_QUIT:
        //quit out of the game
        done = 1;
      break;
    }
  }
  
  const Uint8 *state = SDL_GetKeyboardState(NULL);
  if(state[SDL_SCANCODE_LEFT])
  {
    game->man.x -= 10;
  }
  if(state[SDL_SCANCODE_RIGHT])
  {
    game->man.x += 10;
  }
  if(state[SDL_SCANCODE_UP])
  {
    game->man.y -= 10;
  }
  if(state[SDL_SCANCODE_DOWN])
  {
    game->man.y += 10;
  }
  
  return done;
}

void doRender(SDL_Renderer *renderer, GameState *game)
{
  //set the drawing color to blue
  SDL_SetRenderDrawColor(renderer, 128, 128, 255, 255);
  
  //Clear the screen (to blue)
  SDL_RenderClear(renderer);
  
  //set the drawing color to white
  SDL_SetRenderDrawColor(renderer, 255, 255, 255, 255);
  
  //draw a rectangle at man's position
  SDL_Rect rect = { game->man.x, game->man.y, 48, 48 };
  SDL_RenderCopyEx(renderer, game->manFrames[0], NULL, &rect, 0, NULL, 0);
  
  //draw the star image
//  for(int i = 0; i < 100; i++)
//  {
//    SDL_Rect starRect = { game->stars[i].x, game->stars[i].y, 64, 64 };
//    SDL_RenderCopy(renderer, game->star, NULL, &starRect);
//  }
  
  //We are done drawing, "present" or show to the screen what we've drawn
  SDL_RenderPresent(renderer);
}

int main(int argc, char *argv[])
{
  GameState gameState;
  SDL_Window *window = NULL;                    // Declare a window
  SDL_Renderer *renderer = NULL;                // Declare a renderer
  
  SDL_Init(SDL_INIT_VIDEO);              // Initialize SDL2
  
  srandom((int)time(NULL));
  
  //Create an application window with the following settings:
  window = SDL_CreateWindow("Game Window",                     // window title
                            SDL_WINDOWPOS_UNDEFINED,           // initial x position
                            SDL_WINDOWPOS_UNDEFINED,           // initial y position
                            640,                               // width, in pixels
                            480,                               // height, in pixels
                            0                                  // flags
                            );
  renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);
  gameState.renderer = renderer;
  
  loadGame(&gameState);
  
  // The window is open: enter program loop (see SDL_PollEvent)
  int done = 0;
  
  //Event loop
  while(!done)
  {
    //Check for events
    done = processEvents(window, &gameState);
    
    //Render display
    doRender(renderer, &gameState);
    
    //don't burn up the CPU
    //SDL_Delay(10);
  }
  

  //Shutdown game and unload all memory
  SDL_DestroyTexture(gameState.star);
  SDL_DestroyTexture(gameState.manFrames[0]);
  SDL_DestroyTexture(gameState.manFrames[1]);
  SDL_DestroyTexture(gameState.brick);

  // Close and destroy the window
  SDL_DestroyWindow(window);
  SDL_DestroyRenderer(renderer);
  
  // Clean up
  SDL_Quit();
  return 0;
}
